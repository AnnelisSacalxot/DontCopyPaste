
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DontCopyParser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public DontCopyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DontCopyParser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DontCopyParser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\010\007\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\007\004\000\002\011\005\000" +
    "\002\011\007\000\002\011\007\000\002\012\005\000\002" +
    "\012\004\000\002\012\006\000\002\013\007\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\042\004\006\010\020\013\016\015\030\016" +
    "\017\017\010\020\026\021\023\022\031\031\025\032\027" +
    "\033\032\034\004\035\005\036\011\060\014\001\002\000" +
    "\004\012\102\001\002\000\004\012\101\001\002\000\004" +
    "\014\076\001\002\000\004\060\067\001\002\000\004\060" +
    "\ufff4\001\002\000\004\012\066\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\000\001\002\000\004\050\062\001" +
    "\002\000\012\004\037\005\040\006\044\007\043\001\002" +
    "\000\004\060\ufff0\001\002\000\004\060\ufff5\001\002\000" +
    "\004\057\056\001\002\000\004\002\055\001\002\000\030" +
    "\013\016\015\030\016\017\017\010\020\026\021\023\022" +
    "\031\033\032\034\004\035\005\036\011\001\002\000\004" +
    "\060\ufff2\001\002\000\012\004\037\005\040\006\044\007" +
    "\043\001\002\000\004\056\036\001\002\000\004\060\ufff3" +
    "\001\002\000\004\060\034\001\002\000\004\060\ufff6\001" +
    "\002\000\004\060\ufff1\001\002\000\004\012\033\001\002" +
    "\000\030\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002" +
    "\000\004\056\035\001\002\000\012\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\001\002\000\012\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\001\002\000\032\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\060\ufffa\001\002\000\032\013\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\060\ufff9\001\002\000\030\013\016\015" +
    "\030\016\017\017\010\020\026\021\023\022\031\033\032" +
    "\034\004\035\005\036\011\001\002\000\004\002\ufffd\001" +
    "\002\000\032\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\060" +
    "\ufff7\001\002\000\032\013\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\060\ufff8\001\002\000\004\060\046\001\002\000\012" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\001\002\000\012\004" +
    "\037\005\040\006\044\007\043\001\002\000\004\060\053" +
    "\001\002\000\012\004\037\005\040\006\044\007\043\001" +
    "\002\000\004\002\ufffb\001\002\000\014\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\051\uffed\001\002\000\004\060\uffef\001" +
    "\002\000\004\002\001\001\002\000\004\060\057\001\002" +
    "\000\004\056\060\001\002\000\012\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\001\002\000\004\002\ufffe\001\002\000\012" +
    "\004\037\005\040\006\044\007\043\001\002\000\004\051" +
    "\064\001\002\000\004\056\065\001\002\000\004\002\uffe6" +
    "\001\002\000\030\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\001\002\000\006\037\070\056\071\001\002\000\006\060" +
    "\072\061\073\001\002\000\012\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\001\002\000\004\056\075\001\002\000\004\056" +
    "\074\001\002\000\012\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\001\002\000\012\004\uffeb\005\uffeb\006\uffeb\007\uffeb\001" +
    "\002\000\012\004\037\005\040\006\044\007\043\001\002" +
    "\000\012\004\037\005\040\006\044\007\043\001\002\000" +
    "\004\002\uffff\001\002\000\030\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\030\013\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\020\002\020\003\012\005\006\011\014\012" +
    "\023\013\011\014\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\040\010\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\053\014\021\001\001\000\002\001" +
    "\001\000\006\004\040\010\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\044\014\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\046\001\001\000\002\001\001\000\006\004\047" +
    "\007\050\001\001\000\002\001\001\000\006\004\040\010" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\047" +
    "\007\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\047" +
    "\007\076\001\001\000\006\004\040\010\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DontCopyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DontCopyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DontCopyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        	private Symbol s;

        	public void syntax_error(Symbol s){
        		this.s = s;
        	}

        	public Symbol getS(){
        		return this.s;
        	}

                    public void syntax_error(Symbol cur_token) {
                        System.out.println("Error "+cur_token);
                    }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DontCopyParser$actions {
  private final DontCopyParser parser;

  /** Constructor */
  CUP$DontCopyParser$actions(DontCopyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$DontCopyParser$do_action_part00000000(
    int                        CUP$DontCopyParser$act_num,
    lr_parser CUP$DontCopyParser$parser,
    java.util.Stack            CUP$DontCopyParser$stack,
    int                        CUP$DontCopyParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$DontCopyParser$result;

      /* select the action based on the action number */
      switch (CUP$DontCopyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).left;
		int start_valright = ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).value;
		RESULT = start_val;
              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DontCopyParser$parser.done_parsing();
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloque 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= PUBLICR CLASSTV parametro sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-3)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque ::= asignacion sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque ::= salidaSentencia sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= alcance tipo cadena parametro sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // alcance ::= PUBLICR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // alcance ::= PRIVATER 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // alcance ::= PROTECTEDR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // alcance ::= FINALR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= INTTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOLEANTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= STRINGTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= CHARTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= DOUBLETV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= OBJECTTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= VOIDTV 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= castear tipo 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("cadena",4, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= alcance ID 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= tipo ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-2)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= tipo ID IGUAL ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= tipo ID IGUAL ENTERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // salidaSentencia ::= RETURNSA ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-2)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // salidaSentencia ::= BREAKSA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // salidaSentencia ::= THISR PUNTO ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-3)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // llamadaFuncion ::= ID PARENTESISABRE parametro PARENTESISCIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",9, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // castear ::= MAS INTEGERR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // castear ::= MENOS INTEGERR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // castear ::= DIVISION INTEGERR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // castear ::= MULTIPLICACION INTEGERR 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DontCopyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$DontCopyParser$do_action(
    int                        CUP$DontCopyParser$act_num,
    lr_parser CUP$DontCopyParser$parser,
    java.util.Stack            CUP$DontCopyParser$stack,
    int                        CUP$DontCopyParser$top)
    throws Exception
    {
              return CUP$DontCopyParser$do_action_part00000000(
                               CUP$DontCopyParser$act_num,
                               CUP$DontCopyParser$parser,
                               CUP$DontCopyParser$stack,
                               CUP$DontCopyParser$top);
    }
}

}
