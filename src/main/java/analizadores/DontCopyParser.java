
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DontCopyParser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public DontCopyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DontCopyParser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DontCopyParser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\010\007\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\007\004\000\002\011\005\000" +
    "\002\011\007\000\002\011\007\000\002\012\005\000\002" +
    "\012\004\000\002\012\006\000\002\013\007\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\042\004\032\005\005\006\006\007\012\031" +
    "\020\035\027\037\031\040\014\041\030\042\010\043\011" +
    "\044\023\045\022\047\004\050\025\051\016\001\002\000" +
    "\004\027\102\001\002\000\004\052\101\001\002\000\004" +
    "\052\100\001\002\000\004\051\071\001\002\000\004\051" +
    "\ufff3\001\002\000\004\051\ufff2\001\002\000\004\052\070" +
    "\001\002\000\004\002\ufffc\001\002\000\004\051\ufff5\001" +
    "\002\000\004\002\000\001\002\000\004\021\064\001\002" +
    "\000\012\031\043\032\044\033\040\034\037\001\002\000" +
    "\004\046\060\001\002\000\004\002\057\001\002\000\004" +
    "\051\ufff0\001\002\000\004\051\ufff1\001\002\000\030\004" +
    "\032\005\005\006\006\007\012\037\031\040\014\041\030" +
    "\042\010\043\011\044\023\045\022\001\002\000\004\051" +
    "\054\001\002\000\012\031\043\032\044\033\040\034\037" +
    "\001\002\000\004\030\034\001\002\000\004\051\ufff4\001" +
    "\002\000\004\051\ufff6\001\002\000\004\052\033\001\002" +
    "\000\030\004\uffe5\005\uffe5\006\uffe5\007\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\001\002" +
    "\000\004\051\035\001\002\000\004\027\036\001\002\000" +
    "\012\031\uffe7\032\uffe7\033\uffe7\034\uffe7\001\002\000\032" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\051\ufff7\001\002" +
    "\000\032\004\ufff8\005\ufff8\006\ufff8\007\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\051\ufff8" +
    "\001\002\000\030\004\032\005\005\006\006\007\012\037" +
    "\031\040\014\041\030\042\010\043\011\044\023\045\022" +
    "\001\002\000\004\002\ufffd\001\002\000\032\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\051\ufffa\001\002\000\032\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\051\ufff9\001\002\000" +
    "\004\051\046\001\002\000\012\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\001\002\000\012\031\043\032\044\033\040\034" +
    "\037\001\002\000\004\051\053\001\002\000\012\031\043" +
    "\032\044\033\040\034\037\001\002\000\004\002\ufffb\001" +
    "\002\000\014\022\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\001\002\000\004\027\055\001\002\000\012\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\001\002\000\004\051\uffef\001\002" +
    "\000\004\002\001\001\002\000\012\031\043\032\044\033" +
    "\040\034\037\001\002\000\012\031\043\032\044\033\040" +
    "\034\037\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffe\001\002\000\012\031\043\032\044\033\040\034\037" +
    "\001\002\000\004\022\066\001\002\000\004\027\067\001" +
    "\002\000\004\002\uffe6\001\002\000\030\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\001\002\000\006\010\072\027\073" +
    "\001\002\000\006\051\074\053\075\001\002\000\012\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\001\002\000\004\027\077" +
    "\001\002\000\004\027\076\001\002\000\012\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\001\002\000\012\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\001\002\000\030\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\001\002\000\030\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\001\002\000\012\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\020\002\020\003\014\005\006\011\016\012" +
    "\025\013\012\014\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\040\010\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\055\014\023\001\001\000\002\001\001\000\006\004\040" +
    "\010\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\044\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\046\001\001\000\002\001\001\000\006\004\047" +
    "\007\050\001\001\000\002\001\001\000\006\004\040\010" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\047\007\060\001\001\000\006\004\040" +
    "\010\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\047\007\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DontCopyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DontCopyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DontCopyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        	private Symbol s;

        	public void syntax_error(Symbol s){
        		this.s = s;
        	}

        	public Symbol getS(){
        		return this.s;
        	}

                    public void syntax_error(Symbol cur_token) {
                        System.out.println("Error "+cur_token);
                    }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DontCopyParser$actions {
  private final DontCopyParser parser;

  /** Constructor */
  CUP$DontCopyParser$actions(DontCopyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$DontCopyParser$do_action_part00000000(
    int                        CUP$DontCopyParser$act_num,
    lr_parser CUP$DontCopyParser$parser,
    java.util.Stack            CUP$DontCopyParser$stack,
    int                        CUP$DontCopyParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$DontCopyParser$result;

      /* select the action based on the action number */
      switch (CUP$DontCopyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).left;
		int start_valright = ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)).value;
		RESULT = start_val;
              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DontCopyParser$parser.done_parsing();
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloque 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= PUBLICA CLASST parametro sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-3)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque ::= asignacion sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque ::= salidaSentencia sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= alcance tipo cadena parametro sentencia 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // alcance ::= PUBLICA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // alcance ::= PRIVATEA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // alcance ::= PROTECTEDA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // alcance ::= FINALA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("alcance",2, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= INTT 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOLEANT 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= STRINGT 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= CHART 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= DOUBLET 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= OBJECTT 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= VOIDT 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= castear tipo 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("tipo",3, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cadena ::= ID 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("cadena",4, ((Symbol)CUP$DontCopyParser$stack.peek()), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= alcance ID 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= tipo ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-2)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= tipo ID IGUAL ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= tipo ID IGUAL ENTERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // salidaSentencia ::= RESTURNS ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-2)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // salidaSentencia ::= BREAKS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // salidaSentencia ::= THISA PUNTO ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("salidaSentencia",8, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-3)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // llamadaFuncion ::= ID PARENTESISABRE parametro PARENTESISCIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",9, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-4)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // castear ::= MAS INTEGERA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // castear ::= MENOS INTEGERA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // castear ::= DIVISION INTEGERA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // castear ::= MULTIPLICACION INTEGERA 
            {
              Object RESULT =null;

              CUP$DontCopyParser$result = parser.getSymbolFactory().newSymbol("castear",10, ((Symbol)CUP$DontCopyParser$stack.elementAt(CUP$DontCopyParser$top-1)), ((Symbol)CUP$DontCopyParser$stack.peek()), RESULT);
            }
          return CUP$DontCopyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DontCopyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$DontCopyParser$do_action(
    int                        CUP$DontCopyParser$act_num,
    lr_parser CUP$DontCopyParser$parser,
    java.util.Stack            CUP$DontCopyParser$stack,
    int                        CUP$DontCopyParser$top)
    throws Exception
    {
              return CUP$DontCopyParser$do_action_part00000000(
                               CUP$DontCopyParser$act_num,
                               CUP$DontCopyParser$parser,
                               CUP$DontCopyParser$stack,
                               CUP$DontCopyParser$top);
    }
}

}
